<?php

/**
 * @file
 * Contains hook implementations for the Accessibility module.
 *
 * This module provides tools for monitoring and improving website accessibility.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/* --------------------------------------------------------------------------
 * Hook implementations
 * ------------------------------------------------------------------------
 * */

/**
 * Implements hook_theme().
 */
function accessibility_theme($existing, $type, $theme, $path) {
  return [
    'accessibility_dashboard' => [
      'template' => 'accessibility-dashboard',
      'variables' => [
        'dashboard_url' => NULL,
        'config_url' => NULL,
        'stats_url' => NULL,
        'report_url' => NULL,
        'test_violations_url' => NULL,
        'debug' => FALSE,
      ],
    ],
    // The stats page now loads all data via AJAX, so we only need the URLs.
    'accessibility_stats' => [
      'template' => 'accessibility-stats',
      'variables' => [
        'dashboard_url' => NULL,
        'config_url' => NULL,
        'unique_pages' => 0,
        'total_violations' => 0,
        'violation_stats' => [
          'critical' => 0,
          'serious' => 0,
          'moderate' => 0,
          'minor' => 0,
        ],
      ],
    ],
    'accessibility_report' => [
      'template' => 'accessibility-report',
      'variables' => [
        'report' => [],
        'scanned_url' => '',
      ],
    ],
    'accessibility_comprehensive_report' => [
      'template' => 'accessibility-comprehensive-report',
      'variables' => [
        'violation_stats' => [],
        'total_violations' => 0,
        'unique_pages' => 0,
        'scanned_urls' => [],
      ],
    ],
    'accessibility_analysis' => [
      'variables' => [
        'result' => NULL,
        'timestamp' => NULL,
      ],
      'template' => 'accessibility-analysis',
    ],
    'accessibility_test_violations' => [
      'template' => 'accessibility-test-violations',
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function accessibility_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (strpos($route_name, 'accessibility.') === 0) {
    $suggestions[] = 'page__accessibility';
    $suggestions[] = 'page__accessibility__' . str_replace('.', '_', $route_name);
  }
}

/**
 * Implements hook_library_info_build().
 */
function accessibility_library_info_build() {
  $libraries = [];

  $libraries['axe_scanner'] = [
    'version' => '1.x',
    'js' => [
      'js/axe-scanner.js' => [],
    ],
    'dependencies' => [
      'core/drupal',
      'core/jquery',
      'core/drupalSettings',
      'core/drupal.message',
    ],
  ];

  $libraries['chartjs'] = [
    'version' => '4.3.0',
    'js' => [
      'https://cdn.jsdelivr.net/npm/chart.js@4.3.0/dist/chart.umd.min.js' => [
        'type' => 'external',
        'minified' => TRUE,
      ],
    ],
  ];

  // Add the Chart.js date adapter for date-fns (bundle version includes date-fns).
  $libraries['chartjs_adapter_date_fns'] = [
    'version' => '3.0.0',
    'js' => [
      'https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js' => [
        'type' => 'external',
        'minified' => TRUE,
      ],
    ],
    'dependencies' => [
      'accessibility/chartjs',
    ],
  ];

  $libraries['chartjs_zoom_plugin'] = [
    'version' => '2.0.1',
    'js' => [
      'https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@2.0.1/dist/chartjs-plugin-zoom.min.js' => [
        'type' => 'external',
        'minified' => TRUE,
      ],
    ],
    'dependencies' => [
      'accessibility/chartjs',
    ],
  ];

  $libraries['dashboard_styles'] = [
    'version' => '1.x',
    'css' => [
      'theme' => [
        'css/accessibility-dashboard.css' => [],
      ],
    ],
  ];

  // Library for the interactive statistics page.
  $libraries['stats'] = [
    'version' => '1.x',
    'js' => [
      'js/accessibility-stats.js' => [],
    ],
    'css' => [
      'theme' => [
        'css/accessibility-stats.css' => [],
      ],
    ],
    'dependencies' => [
      'core/drupal',
      'core/jquery',
      'core/once',
      'core/drupal.message',
      'accessibility/chartjs',
      'accessibility/chartjs_zoom_plugin',
      'accessibility/chartjs_adapter_date_fns',
    ],
  ];

  // Library for the comprehensive report page.
  $libraries['comprehensive_report'] = [
    'version' => '1.x',
    'css' => [
      'theme' => [
        'css/comprehensive-report.css' => [],
      ],
    ],
    'dependencies' => [
      'core/drupal',
    ],
  ];


  $libraries['test_violations_axe'] = [
    'version' => '1.x',
    'js' => [
      'js/test-violations.js' => [],
    ],
    'css' => [
      'theme' => [
        'css/test-violations.css' => [],
      ],
    ],
    'dependencies' => [
      'core/jquery',
      'core/drupal',
      'core/once',
    ],
  ];

  // Library for the Axe Scan Sidebar Block.
  $libraries['axe_scan_sidebar'] = [
    'version' => '1.x',
    'js' => [
      'js/axe-scan-sidebar.js' => [],
    ],
    'css' => [
      'theme' => [
        'css/axe-scan-sidebar.css' => [],
      ],
    ],
    'dependencies' => [
      'core/jquery',
      'core/drupal',
      'core/once',
      'core/drupalSettings',
    ],
  ];

  return $libraries;
}

/**
 * Implements hook_page_attachments().
 */
function accessibility_page_attachments(array &$attachments) {
  // Only attach assets for users with the proper permissions.
  if (!\Drupal::currentUser()->hasPermission('administer site configuration')) {
    return;
  }

  $route_name = \Drupal::routeMatch()->getRouteName();

  // Check if auto_scan parameter is present in the URL
  $request = \Drupal::request();
  $auto_scan_requested = $request->query->get('auto_scan') === '1';

  // Attach global assets needed on multiple pages.
  $is_accessibility_page = strpos($route_name, 'accessibility.') === 0;
  $is_node_edit_form = strpos($route_name, 'entity.node.edit_form') === 0;

  if ($is_accessibility_page || $is_node_edit_form || $auto_scan_requested) {
    // Attach the axe scanner on all relevant pages or when auto_scan is requested.
    $attachments['#attached']['library'][] = 'accessibility/axe_scanner';

    // Add the OpenRouter API key to drupalSettings if it exists.
    $config = \Drupal::config('accessibility.settings');
    if ($api_key = $config->get('openrouter_api_key')) {
      $attachments['#attached']['drupalSettings']['accessibility']['openRouterKey'] = $api_key;
    }
  }

  // Use a switch statement for cleaner, route-specific library attachments.
  switch ($route_name) {
    case 'accessibility.dashboard':
      $attachments['#attached']['library'][] = 'accessibility/dashboard_styles';
      break;

    case 'accessibility.stats':
      $attachments['#attached']['library'][] = 'accessibility/stats';
      break;

    case 'accessibility.comprehensive_report':
      $attachments['#attached']['library'][] = 'accessibility/comprehensive_report';
      break;


    case 'accessibility.test_violations':
      $attachments['#attached']['library'][] = 'accessibility/test_violations_styles';
      break;
  }
}

/**
 * Implements hook_help().
 */
function accessibility_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.accessibility':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Accessibility module provides tools for monitoring and improving website accessibility, including AI-powered analysis using Mistral 7B LLM.') . '</p>';
      return $output;

    default:
      // Return NULL for other routes to let other modules provide help.
      return NULL;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function accessibility_preprocess_page(&$variables) {
  // Check if this is the front page.
  $is_front = \Drupal::service('path.matcher')->isFrontPage();
  
  if ($is_front) {
    // The accessibility violations button has been removed from the front page
    // as requested by the user.
  }
}
