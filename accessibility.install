<?php

/**
 * @file
 * Install, update, and uninstall functions for the Accessibility module.
 */

/**
 * Implements hook_schema().
 *
 * Defines the database schema for the accessibility_violations table.
 */
function accessibility_schema() {
  $schema['accessibility_violations'] = [
    'description' => 'Stores accessibility violation data from axe-core scans.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique ID for the violation record.',
      ],
      'url' => [
        'type' => 'varchar',
        'length' => 2048,
        'not null' => TRUE,
        'description' => 'The URL of the page that was scanned.',
      ],
      'rule_id' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The axe rule ID that was violated.',
      ],
      'impact' => [
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'description' => 'The impact level of the violation (critical, serious, moderate, minor).',
      ],
      'impact_weight' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 4,
        'description' => 'Numeric weight for sorting by impact (1=critical, 2=serious, 3=moderate, 4=minor).',
      ],
      'description' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'A description of the accessibility issue.',
      ],
      'help' => [
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Help text for fixing the violation.',
      ],
      'help_url' => [
        'type' => 'varchar',
        'length' => 2048,
        'not null' => FALSE,
        'description' => 'A URL to a page with more information about the issue.',
      ],
      'tags' => [
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'JSON encoded array of tags for this violation.',
      ],
      'nodes_count' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of DOM nodes affected by this violation.',
      ],
      'nodes_data' => [
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'JSON encoded data about the HTML nodes that have the violation.',
      ],
      'scanned_url' => [
        'type' => 'varchar',
        'length' => 2048,
        'not null' => TRUE,
        'description' => 'The URL of the page that was scanned (deprecated, use url field).',
      ],
      'nodes' => [
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'description' => 'Serialized data about the HTML nodes that have the violation (deprecated, use nodes_data).',
      ],
      'timestamp' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The UNIX timestamp when the scan was performed.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'url' => ['url'],
      'impact_weight' => ['impact_weight'],
      'timestamp_impact' => ['timestamp', 'impact'],
      'timestamp_description' => ['timestamp', 'description'],
    ],
  ];

  $schema['accessibility_reports'] = [
    'description' => 'Stores summary data for accessibility reports by URL.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique ID for the report record.',
      ],
      'url' => [
        'type' => 'varchar',
        'length' => 2048,
        'not null' => TRUE,
        'description' => 'The URL of the page that was scanned.',
      ],
      'title' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'The title of the page that was scanned.',
      ],
      'violation_count' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Total number of violations found on this page.',
      ],
      'critical_count' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of critical violations.',
      ],
      'serious_count' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of serious violations.',
      ],
      'moderate_count' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of moderate violations.',
      ],
      'minor_count' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of minor violations.',
      ],
      'last_scanned' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The UNIX timestamp when the page was last scanned.',
      ],
    ],
    'primary key' => ['id'],
    'unique keys' => [
      'url' => ['url'],
    ],
    'indexes' => [
      'last_scanned' => ['last_scanned'],
      'violation_count' => ['violation_count'],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_uninstall().
 *
 * Removes the accessibility tables when the module is uninstalled.
 */
function accessibility_uninstall() {
  // Remove both tables.
  $database = \Drupal::database();
  $schema = $database->schema();
  
  $schema->dropTable('accessibility_violations');
  $schema->dropTable('accessibility_reports');
}

/**
 * Create the new accessibility_reports table.
 */
function accessibility_update_8001() {
  $database = \Drupal::database();
  $schema = $database->schema();
  
  // Create accessibility_reports table if it doesn't exist
  if (!$schema->tableExists('accessibility_reports')) {
    $table = [
      'description' => 'Stores summary data for accessibility reports by URL.',
      'fields' => [
        'id' => [
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Primary Key: Unique ID for the report record.',
        ],
        'url' => [
          'type' => 'varchar',
          'length' => 2048,
          'not null' => TRUE,
          'description' => 'The URL of the page that was scanned.',
        ],
        'title' => [
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
          'description' => 'The title of the page that was scanned.',
        ],
        'violation_count' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Total number of violations found on this page.',
        ],
        'critical_count' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Number of critical violations.',
        ],
        'serious_count' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Number of serious violations.',
        ],
        'moderate_count' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Number of moderate violations.',
        ],
        'minor_count' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Number of minor violations.',
        ],
        'last_scanned' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The UNIX timestamp when the page was last scanned.',
        ],
      ],
      'primary key' => ['id'],
      'unique keys' => [
        'url' => ['url'],
      ],
      'indexes' => [
        'last_scanned' => ['last_scanned'],
        'violation_count' => ['violation_count'],
      ],
    ];
    
    $schema->createTable('accessibility_reports', $table);
  }
  
  // Update existing accessibility_violations table structure
  if ($schema->tableExists('accessibility_violations')) {
    // Add new fields if they don't exist
    $new_fields = [
      'url' => [
        'type' => 'varchar',
        'length' => 2048,
        'not null' => TRUE,
        'description' => 'The URL of the page that was scanned.',
      ],
      'rule_id' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The axe rule ID that was violated.',
      ],
      'impact_weight' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 4,
        'description' => 'Numeric weight for sorting by impact (1=critical, 2=serious, 3=moderate, 4=minor).',
      ],
      'help' => [
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Help text for fixing the violation.',
      ],
      'tags' => [
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'JSON encoded array of tags for this violation.',
      ],
      'nodes_count' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of DOM nodes affected by this violation.',
      ],
      'nodes_data' => [
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'JSON encoded data about the HTML nodes that have the violation.',
      ],
    ];
    
    foreach ($new_fields as $field_name => $field_spec) {
      if (!$schema->fieldExists('accessibility_violations', $field_name)) {
        $schema->addField('accessibility_violations', $field_name, $field_spec);
      }
    }
    
    // Add new indexes
    if (!$schema->indexExists('accessibility_violations', 'url')) {
      $schema->addIndex('accessibility_violations', 'url', ['url']);
    }
    if (!$schema->indexExists('accessibility_violations', 'impact_weight')) {
      $schema->addIndex('accessibility_violations', 'impact_weight', ['impact_weight']);
    }
  }
}
