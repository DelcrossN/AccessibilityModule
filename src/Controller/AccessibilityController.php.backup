<?php

namespace Drupal\accessibility\Controller;

use Drupal\Core\Controller\ControllerBase;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\accessibility\Service\AccessibilityApiClient;
use Drupal\accessibility\Service\LlmAnalysisService;
use Drupal\Core\Url;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use Drupal\Core\Database\Connection;

/**
 * Controller for handling accessibility dashboard and reporting.
 *
 * This controller manages the accessibility dashboard, statistics, and
 * reporting functionality.
 */
class AccessibilityController extends ControllerBase {

  /**
   * The accessibility API client service.
   *
   * @var \Drupal\accessibility\Service\AccessibilityApiClient
   */
  protected $apiClient;

  /**
   * The LLM analysis service.
   *
   * @var \Drupal\accessibility\Service\LlmAnalysisService
   */
  protected $llmService;

  /**
   * The HTTP client.
   *
   * @var \GuzzleHttp\ClientInterface
   */
  protected $httpClient;

    /**
   * The database service.
   *
   * @var \Drupal\Core\Database\Connection
   */
  protected $database;

  /**
   * AccessibilityController constructor.
   *
   * @param \Drupal\accessibility\Service\AccessibilityApiClient $api_client
   *   The API client service.
   * @param \Drupal\accessibility\Service\LlmAnalysisService $llm_service
   *   The LLM service.
   * @param \GuzzleHttp\ClientInterface $http_client
   *   The HTTP client.
   * @param \Drupal\Core\Database\Connection $database
   *   The database service.
   */
  public function __construct(AccessibilityApiClient $api_client, LlmAnalysisService $llm_service, ClientInterface $http_client, Connection $database) {
    $this->apiClient = $api_client;
    $this->llmService = $llm_service;
    $this->httpClient = $http_client;
    $this->database = $database;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('accessibility.api_client'),
      $container->get('accessibility.llm_service'),
      $container->get('http_client'),
      $container->get('database')
    );
  }

  /**
   * Displays the accessibility dashboard.
   *
   * @return array
   *   A render array for the dashboard page.
   */
  public function dashboard() {
    return [
      '#theme' => 'accessibility_dashboard',
      '#dashboard_url' => Url::fromRoute('accessibility.dashboard')->toString(),
      '#config_url' => Url::fromRoute('accessibility.settings')->toString(),
      '#stats_url' => Url::fromRoute('accessibility.stats')->toString(),
      '#report_url' => '/admin/config/accessibility/report',
      '#test_violations_url' => Url::fromRoute('accessibility.test_violations')->toString(),
      '#attached' => [
        'library' => [
          'accessibility/axe_scanner',
          'accessibility/chartjs',
        ],
      ],
      '#cache' => ['max-age' => 0],
    ];
  }

  /**
   * Displays accessibility statistics.
   *
   * @return array
   *   A render array for the statistics page.
   */
  public function stats() {
    // @TODO: Replace sample data with data from a database or API.
    $stats = [
      'total_issues' => 42,
      'fixed_issues' => 18,
      'high_priority' => 9,
      'pages_scanned' => 24,
    ];

    return [
      '#theme' => 'accessibility_stats',
      '#stats' => $stats,
      '#attached' => ['library' => ['accessibility/stats']],
      '#cache' => ['max-age' => 0, 'tags' => ['accessibility_stats']],
    ];
  }

  /**
   * Generates an accessibility report for a given URL with optional AI analysis.
   *
   * @param string $url
   *   The URL to scan.
   * @param bool $use_ai
   *   Whether to include AI analysis.
   *
   * @return array
   *   A render array for the report page.
   */
  public function generateReport($url = NULL, $use_ai = FALSE) {
    if (empty($url)) {
      $this->messenger()->addError($this->t('No URL was provided to generate a report.'));
      return [];
    }

    $full_url = $this->apiClient->getFullUrl($url);
    $config = $this->config('accessibility.settings');

    try {
      // Fetch the page content only ONCE using the injected client.
      $response = $this->httpClient->get($full_url);
      $html_content = (string) $response->getBody();

      // This assumes your API client can scan raw HTML. If it must take a URL,
      // this logic still correctly avoids a second fetch for the LLM service.
      $report = $this->apiClient->scanHtml($html_content, $full_url);

      $ai_analysis = [];
      if ($use_ai && $config->get('llm_enabled')) {
        try {
          $existing_issues = [];
          if (!empty($report['violations'])) {
            foreach ($report['violations'] as $violation) {
              $existing_issues[] = [
                'type' => $violation['id'] ?? 'unknown',
                'description' => $violation['description'] ?? '',
                'impact' => $violation['impact'] ?? 'moderate',
                'nodes' => count($violation['nodes'] ?? []),
              ];
            }
          }

          // Pass the already-fetched HTML to the LLM service.
          $ai_analysis = $this->llmService->analyzeAccessibility($html_content, $existing_issues);
        }
        catch (\Exception $e) {
          $this->messenger()->addError($this->t('The AI analysis could not be completed. Please check the logs for details.'));
          $this->getLogger('accessibility_llm')->error('AI analysis failed: @error', ['@error' => $e->getMessage()]);
        }
      }

      return [
        '#theme' => 'accessibility_report',
        '#report' => $report,
        '#ai_analysis' => $ai_analysis,
        '#scanned_url' => $full_url,
        '#use_ai' => $use_ai,
        '#attached' => [
          'library' => ['accessibility/report_styling'],
          'drupalSettings' => [
            'accessibility' => ['aiEnabled' => $use_ai],
          ],
        ],
      ];
    }
    catch (RequestException $e) {
      $this->messenger()->addError($this->t('Failed to retrieve the page for scanning: @error', ['@error' => $e->getMessage()]));
      $this->getLogger('accessibility')->error('Unable to retrieve page for generateReport: @error', ['@error' => $e->getMessage()]);
      return [];
    }
  }

  /**
   * Displays a test page with various accessibility violations.
   *
   * This page is intentionally riddled with accessibility issues
   * for testing purposes with axe-core and other scanning tools.
   *
   * @return array
   *   A render array for the test violations page.
   */
  public function testViolations() {
    return [
      '#theme' => 'accessibility_test_violations',
      '#attached' => [
        'library' => [
          'accessibility/axe_scanner',
          'accessibility/test_violations_styles',
        ],
      ],
      '#cache' => ['max-age' => 0],
    ];
  }

  /**
   * Reports overview page - shows all pages with recent scans.
   *
   * @return array
   *   A render array for the reports overview page.
   */
  public function reports() {
    // Get all violations from the database - SIMPLE VERSION
    $database = $this->database;
    
    try {
      // First check if tables exist
      if (!$database->schema()->tableExists('accessibility_violations') || 
          !$database->schema()->tableExists('accessibility_reports')) {
        throw new \Exception('Tables do not exist');
      }
      
      // Get all violations - simple query
      $violations_result = $database->select('accessibility_violations', 'av')
        ->fields('av')
        ->execute()
        ->fetchAll();
      
      // Get all reports for page titles
      $reports_result = $database->select('accessibility_reports', 'ar')
        ->fields('ar')
        ->execute()
        ->fetchAll();
      
      // Create lookup array for page titles
      $page_titles = [];
      foreach ($reports_result as $report) {
        $page_titles[$report->url] = $report->title;
      }
      
      $violations = [];
      $critical_count = 0;
      $serious_count = 0;
      $moderate_count = 0;
      $minor_count = 0;
      
      foreach ($violations_result as $row) {
        $violation_data = [
          'id' => $row->rule_id,  // Changed from 'rule_id' to 'id' to match template
          'impact' => $row->impact,
          'description' => $row->description,
          'help' => $row->help,
          'help_url' => $row->help_url,
          'instances' => $row->nodes_count,  // Changed from 'nodes_count' to 'instances' to match template
          'page_title' => $page_titles[$row->url] ?? 'Unknown Page',
          'page_url' => $row->url,
        ];
        $violations[] = $violation_data;
        
        // Count by severity
        switch ($row->impact) {
          case 'critical':
            $critical_count++;
            break;
          case 'serious':
            $serious_count++;
            break;
          case 'moderate':
            $moderate_count++;
            break;
          default:
            $minor_count++;
            break;
        }
      }
      
      // DEBUG: Show final counts
      // $this->messenger()->addMessage('DEBUG: Processed ' . count($violations) . ' violations. Critical: ' . $critical_count . ', Serious: ' . $serious_count);
      
    } catch (\Exception $e) {
      // If tables don't exist or there's an error, show empty state
      $violations = [];
      $critical_count = $serious_count = $moderate_count = $minor_count = 0;
    }
    
    return [
      '#theme' => 'accessibility_reports',
      '#violations' => $violations,
      '#total_violations' => count($violations),
      '#critical_count' => $critical_count,
      '#serious_count' => $serious_count,
      '#moderate_count' => $moderate_count,
      '#minor_count' => $minor_count,
      '#cache' => ['max-age' => 0],
      '#attached' => [
        'library' => [
          'accessibility/reports_styling',
        ],
      ],
    ];
  }

  /**
   * Detailed report for a specific page.
   *
   * @param string $encoded_url
   *   The base64-encoded URL of the page to show report for.
   *
   * @return array
   *   A render array for the detailed page report.
   */
  public function pageReport($encoded_url) {
    // Check if the tables exist first
    if (!$this->database->schema()->tableExists('accessibility_violations') || 
        !$this->database->schema()->tableExists('accessibility_reports')) {
      // Auto-create the tables
      $this->createAccessibilityTables();
      $this->messenger()->addStatus($this->t('Accessibility reports tables have been created successfully.'));
    }

    $url = base64_decode($encoded_url);
    
    // Get detailed violations from database
    $query = $this->database->select('accessibility_violations', 'av')
      ->fields('av')
      ->condition('url', $url)
      ->orderBy('impact_weight', 'ASC')
      ->orderBy('rule_id', 'ASC')
      ->execute();
    
    $violations = [];
    while ($record = $query->fetchAssoc()) {
      $violations[] = [
        'rule_id' => $record['rule_id'],
        'impact' => $record['impact'],
        'description' => $record['description'],
        'help' => $record['help'],
        'help_url' => $record['help_url'],
        'tags' => json_decode($record['tags'], TRUE) ?: [],
        'nodes_count' => $record['nodes_count'],
        'nodes_data' => json_decode($record['nodes_data'], TRUE) ?: [],
      ];
    }

    // Get summary info
    $summary_query = $this->database->select('accessibility_reports', 'ar')
      ->fields('ar')
      ->condition('url', $url)
      ->execute()
      ->fetchAssoc();

    return [
      '#theme' => 'accessibility_page_report',
      '#url' => $url,
      '#title' => $summary_query['title'] ?? 'Unknown Page',
      '#violations' => $violations,
      '#summary' => $summary_query,
      '#last_scanned' => date('M j, Y g:i A', $summary_query['last_scanned']),
      '#reports_overview_url' => '/admin/config/accessibility/report',
      '#attached' => [
        'library' => ['accessibility/reports_styling'],
      ],
    ];
  }

  /**
   * Creates the accessibility tables if they don't exist.
   */
  private function createAccessibilityTables() {
    $schema = $this->database->schema();
    
    // Create accessibility_reports table
    if (!$schema->tableExists('accessibility_reports')) {
      $table = [
        'description' => 'Stores summary data for accessibility reports by URL.',
        'fields' => [
          'id' => [
            'type' => 'serial',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'description' => 'Primary Key: Unique ID for the report record.',
          ],
          'url' => [
            'type' => 'varchar',
            'length' => 2048,
            'not null' => TRUE,
            'description' => 'The URL of the page that was scanned.',
          ],
          'title' => [
            'type' => 'varchar',
            'length' => 255,
            'not null' => FALSE,
            'description' => 'The title of the page that was scanned.',
          ],
          'violation_count' => [
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
            'description' => 'Total number of violations found on this page.',
          ],
          'critical_count' => [
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
            'description' => 'Number of critical violations.',
          ],
          'serious_count' => [
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
            'description' => 'Number of serious violations.',
          ],
          'moderate_count' => [
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
            'description' => 'Number of moderate violations.',
          ],
          'minor_count' => [
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
            'description' => 'Number of minor violations.',
          ],
          'last_scanned' => [
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'description' => 'The UNIX timestamp when the page was last scanned.',
          ],
        ],
        'primary key' => ['id'],
        'unique keys' => [
          'url' => ['url'],
        ],
        'indexes' => [
          'last_scanned' => ['last_scanned'],
          'violation_count' => ['violation_count'],
        ],
      ];
      
      $schema->createTable('accessibility_reports', $table);
    }
    
    // Update accessibility_violations table if it exists, add missing fields
    if ($schema->tableExists('accessibility_violations')) {
      $new_fields = [
        'url' => [
          'type' => 'varchar',
          'length' => 2048,
          'not null' => TRUE,
          'default' => '',
          'description' => 'The URL of the page that was scanned.',
        ],
        'rule_id' => [
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
          'description' => 'The axe rule ID that was violated.',
        ],
        'impact_weight' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 4,
          'description' => 'Numeric weight for sorting by impact.',
        ],
        'help' => [
          'type' => 'text',
          'not null' => FALSE,
          'description' => 'Help text for fixing the violation.',
        ],
        'tags' => [
          'type' => 'text',
          'not null' => FALSE,
          'description' => 'JSON encoded array of tags for this violation.',
        ],
        'nodes_count' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Number of DOM nodes affected by this violation.',
        ],
        'nodes_data' => [
          'type' => 'text',
          'size' => 'big',
          'not null' => FALSE,
          'description' => 'JSON encoded data about the HTML nodes that have the violation.',
        ],
      ];
      
      foreach ($new_fields as $field_name => $field_spec) {
        if (!$schema->fieldExists('accessibility_violations', $field_name)) {
          $schema->addField('accessibility_violations', $field_name, $field_spec);
        }
      }
      
      // Add indexes if they don't exist
      if (!$schema->indexExists('accessibility_violations', 'url')) {
        $schema->addIndex('accessibility_violations', 'url', ['url']);
      }
      if (!$schema->indexExists('accessibility_violations', 'impact_weight')) {
        $schema->addIndex('accessibility_violations', 'impact_weight', ['impact_weight']);
      }
    }
  }

}
